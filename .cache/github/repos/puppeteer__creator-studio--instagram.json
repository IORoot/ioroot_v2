{
  "id": 309449553,
  "node_id": "MDEwOlJlcG9zaXRvcnkzMDk0NDk1NTM=",
  "name": "puppeteer__creator-studio--instagram",
  "full_name": "IORoot/puppeteer__creator-studio--instagram",
  "private": false,
  "owner": {
    "login": "IORoot",
    "id": 8770616,
    "node_id": "MDQ6VXNlcjg3NzA2MTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8770616?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/IORoot",
    "html_url": "https://github.com/IORoot",
    "followers_url": "https://api.github.com/users/IORoot/followers",
    "following_url": "https://api.github.com/users/IORoot/following{/other_user}",
    "gists_url": "https://api.github.com/users/IORoot/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/IORoot/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/IORoot/subscriptions",
    "organizations_url": "https://api.github.com/users/IORoot/orgs",
    "repos_url": "https://api.github.com/users/IORoot/repos",
    "events_url": "https://api.github.com/users/IORoot/events{/privacy}",
    "received_events_url": "https://api.github.com/users/IORoot/received_events",
    "type": "User",
    "user_view_type": "public",
    "site_admin": false
  },
  "html_url": "https://github.com/IORoot/puppeteer__creator-studio--instagram",
  "description": "Javascript puppeteer script to automate the scheduling of instagram posts through the facebook creator studio.",
  "fork": false,
  "url": "https://api.github.com/repos/IORoot/puppeteer__creator-studio--instagram",
  "forks_url": "https://api.github.com/repos/IORoot/puppeteer__creator-studio--instagram/forks",
  "keys_url": "https://api.github.com/repos/IORoot/puppeteer__creator-studio--instagram/keys{/key_id}",
  "collaborators_url": "https://api.github.com/repos/IORoot/puppeteer__creator-studio--instagram/collaborators{/collaborator}",
  "teams_url": "https://api.github.com/repos/IORoot/puppeteer__creator-studio--instagram/teams",
  "hooks_url": "https://api.github.com/repos/IORoot/puppeteer__creator-studio--instagram/hooks",
  "issue_events_url": "https://api.github.com/repos/IORoot/puppeteer__creator-studio--instagram/issues/events{/number}",
  "events_url": "https://api.github.com/repos/IORoot/puppeteer__creator-studio--instagram/events",
  "assignees_url": "https://api.github.com/repos/IORoot/puppeteer__creator-studio--instagram/assignees{/user}",
  "branches_url": "https://api.github.com/repos/IORoot/puppeteer__creator-studio--instagram/branches{/branch}",
  "tags_url": "https://api.github.com/repos/IORoot/puppeteer__creator-studio--instagram/tags",
  "blobs_url": "https://api.github.com/repos/IORoot/puppeteer__creator-studio--instagram/git/blobs{/sha}",
  "git_tags_url": "https://api.github.com/repos/IORoot/puppeteer__creator-studio--instagram/git/tags{/sha}",
  "git_refs_url": "https://api.github.com/repos/IORoot/puppeteer__creator-studio--instagram/git/refs{/sha}",
  "trees_url": "https://api.github.com/repos/IORoot/puppeteer__creator-studio--instagram/git/trees{/sha}",
  "statuses_url": "https://api.github.com/repos/IORoot/puppeteer__creator-studio--instagram/statuses/{sha}",
  "languages_url": "https://api.github.com/repos/IORoot/puppeteer__creator-studio--instagram/languages",
  "stargazers_url": "https://api.github.com/repos/IORoot/puppeteer__creator-studio--instagram/stargazers",
  "contributors_url": "https://api.github.com/repos/IORoot/puppeteer__creator-studio--instagram/contributors",
  "subscribers_url": "https://api.github.com/repos/IORoot/puppeteer__creator-studio--instagram/subscribers",
  "subscription_url": "https://api.github.com/repos/IORoot/puppeteer__creator-studio--instagram/subscription",
  "commits_url": "https://api.github.com/repos/IORoot/puppeteer__creator-studio--instagram/commits{/sha}",
  "git_commits_url": "https://api.github.com/repos/IORoot/puppeteer__creator-studio--instagram/git/commits{/sha}",
  "comments_url": "https://api.github.com/repos/IORoot/puppeteer__creator-studio--instagram/comments{/number}",
  "issue_comment_url": "https://api.github.com/repos/IORoot/puppeteer__creator-studio--instagram/issues/comments{/number}",
  "contents_url": "https://api.github.com/repos/IORoot/puppeteer__creator-studio--instagram/contents/{+path}",
  "compare_url": "https://api.github.com/repos/IORoot/puppeteer__creator-studio--instagram/compare/{base}...{head}",
  "merges_url": "https://api.github.com/repos/IORoot/puppeteer__creator-studio--instagram/merges",
  "archive_url": "https://api.github.com/repos/IORoot/puppeteer__creator-studio--instagram/{archive_format}{/ref}",
  "downloads_url": "https://api.github.com/repos/IORoot/puppeteer__creator-studio--instagram/downloads",
  "issues_url": "https://api.github.com/repos/IORoot/puppeteer__creator-studio--instagram/issues{/number}",
  "pulls_url": "https://api.github.com/repos/IORoot/puppeteer__creator-studio--instagram/pulls{/number}",
  "milestones_url": "https://api.github.com/repos/IORoot/puppeteer__creator-studio--instagram/milestones{/number}",
  "notifications_url": "https://api.github.com/repos/IORoot/puppeteer__creator-studio--instagram/notifications{?since,all,participating}",
  "labels_url": "https://api.github.com/repos/IORoot/puppeteer__creator-studio--instagram/labels{/name}",
  "releases_url": "https://api.github.com/repos/IORoot/puppeteer__creator-studio--instagram/releases{/id}",
  "deployments_url": "https://api.github.com/repos/IORoot/puppeteer__creator-studio--instagram/deployments",
  "created_at": "2020-11-02T17:45:41Z",
  "updated_at": "2025-07-21T17:29:51Z",
  "pushed_at": "2022-07-10T09:58:21Z",
  "git_url": "git://github.com/IORoot/puppeteer__creator-studio--instagram.git",
  "ssh_url": "git@github.com:IORoot/puppeteer__creator-studio--instagram.git",
  "clone_url": "https://github.com/IORoot/puppeteer__creator-studio--instagram.git",
  "svn_url": "https://github.com/IORoot/puppeteer__creator-studio--instagram",
  "homepage": "",
  "size": 626,
  "stargazers_count": 0,
  "watchers_count": 0,
  "language": "JavaScript",
  "has_issues": true,
  "has_projects": false,
  "has_downloads": true,
  "has_wiki": false,
  "has_pages": false,
  "has_discussions": false,
  "forks_count": 0,
  "mirror_url": null,
  "archived": true,
  "disabled": false,
  "open_issues_count": 0,
  "license": null,
  "allow_forking": true,
  "is_template": false,
  "web_commit_signoff_required": false,
  "topics": [
    "instagram",
    "puppeteer"
  ],
  "visibility": "public",
  "forks": 0,
  "open_issues": 0,
  "watchers": 0,
  "default_branch": "master",
  "permissions": {
    "admin": true,
    "maintain": true,
    "push": true,
    "triage": true,
    "pull": true
  },
  "readme_content": "# Javascript / Puppeteer Instagram Scheduler\n\n\n\n## IMPORTANT\n\nIMPORTANT - This puppeteer script will not run without a version of chromium that\nhas NOT been compiled with the video/audio codecs. Chrome comes with them as standard\nbut Chromium does not.\n\nYou can download a copy of Chromium with those codecs here:\nhttps://chromium.woolyss.com/ to query these routes.\n\nYou can then set the `executablePath` of puppeteer-core in the puppeteer settings\nto point to this version of chromium.\n\nWarning - If you do not do this, then chromium will not upload any videos to the\ncreator studio because it will not recognise those file formats. Images will work,\nhowever.\n\n\n\n\n## Description\n\nThis puppeteer script will automatically open up a new page, visit (or login) to \nfacebook creator studio and create a new post with all of your supplied details.\n\nThis is a bare-bones example to make it as understandable as possible. It's meant\nfor readability and help to understand the process.\n\nIt comes with a few components, that do separate things. The main parts are:\n\n1. `creator_studio.js` is a node script that does the main work. This runs the \npuppeteer scripts to do the automation.\n\n1. `cli.js` is the command-line interface to the `creator_studio.js`. It allows you\nto run the scripts from the command prompt.\n\n1. `manual_run.js` is for running the `creator_studio.js` with a load of settings\nalready made. Note that it will need changing the `executablePath` to your own path \nas a minimum.\n\n1. `video_download.js` is a node script that will allow you to download a file to the\nlocal filesystem. This is needed so that you can download a video/image to then upload \nit to the creator studio.\n\n1. `cli_vd.js` is a command-line interface to the `video_download.js` script.\n\n1. `server.js` is an HTTP REST server to the same `creator_studio.js` script, allowing\nyou to run the script remotely.\n\n\n\n## Requirements\n\n- Instagram 'business' account\n- Facebook 'creator studio' account.\n- Instagram account connected to the creator studio account.\n- Puppeteer-Core (without chromium installed - we do that manually)\n\n\n\n## Authentication\n\nBefore you can run the script you will need to create an `./auth.json` file in the following structure:\n\n```json\n[\n    {\n        \"apikey\": \"randomAPIKEYstringTOuseFORauthenticatingYOURSELF\",\n        \"user\": \"my_creator_studio_email@gmail.com\",\n        \"pass\": \"my_creator_studio_password\"\n    }\n]\n```\nIf this is not set, then the puppeteer scripts will not be able to login and run.\n\nThe API KEY is used to authenticate yourself with the REST `server.js` file.\n\n\n## `creator_studio.js`\n\nThe script is broken into the following parts:\n\n### 1. Inputs and setting Defaults.\n\nAt the top of the script you have all of thee loading in required libraries, global variables,\ndefault puppeteer_settings, default post settings, constants and XPATH locations.\n\n### 2. Custom logger\n\nThe logger allows us to write to a file and prefix each line with a date/time. Logs are stored in `./logs/debug.log`\n\n### 3. Setters\n\nThese are the methods that change (set) all of the variables declared above. Thesee variables\ncontrol the behaviour of the script.\n\n- `publicSetUsername()` sets the username or email address the script will use to log into the \ncreator studio with.\n\n- `publicSetPassword()` sets the password for the account the script will log into.\n\n- `publicSetCookieFile()` tells the script to write all cookies to this filename set. Use just a filename, like `cookies.json` \n\n\n- `publicSetPuppeteerSettings()` allows you to override the default puppeteer settings. This allows you to do things like turning 'headless' on/off, devtools on/off, give a new chrome path, etc... e.g.\n```js\n{ \n    headless: false, \n    devtools: false,\n    executablePath: \"/Users/me/Chromium.app/Contents/MacOS/Chromium\",\n    args: ['--no-sandbox']\n}\n```\n\n- `publicSetScreenshots()` turns on the screenshot function. This means that each step of the puppeteer script will take an image. This is helpful for debugging purposes and status updates.\n\n- `publicSetNOOP()` will turn on the NO OPeration functionality. Essentially, this will do every step as normal, however it will NOT submit everything at the end, within the creator_studio. THis is good for testing and making sure that all steps are working.\n\n\n### 4. run\n\nThis is the main bulk of the script. Each step is broken up with a comment specifying what it will do. Use a debugger and the `manual_run.js` script (with headless off), to follow each step.\n\nEach step will use the `selector` constant to reference the correct XPATH it should look for to perform it's task. For instance, the `publish_button` may change over time, so we can update the `selector` constant to look in a new XPATH location when that happens.\n\n\n### 5. Public Methods\n\nAt the bottom of the script is a list of the public methods available to the CLI and the HTTP REST Server to access the Setter methods.\n\n\n### Intricacies and XPATH Problems.\n\nInstagram will obfuscate and randomise all of the classnames on the creator studio page. \nThis will make it difficult to target the correct part of the page. All of the current\nselectors and XPaths are in the `selector` object within the `creator_studio.js` file.\n\n### Usage\n\nSee the contents of the `manual_run.js` file to see a working version of running the script manually.\n\n\n\n\n\n\n## `cli.js`\n\nThis is the command-line interface to the script. \n\n### Usage\n\nYou can run the command through the command line (without installing), like this:\n\n```bash\nnode . -u me@gmail.com  to query these routes.\n\n#### `/` \n\nThis is the main route. It will execute the -p PASSWORD -f /Users/me/cookies.json -v ./output.mov -c \"Crosspost\" -d 05/11/2020 -t 02:00 -x yes\n```\n\nRun the help file with:\n\n```bash\n❯ node ./cli.js --help\nUsage: -u <user> -p <pass> -c <cookiefile> -v <videofile>\n\nOptions:\n  --help             Show help                                         [boolean]\n  --version          Show version number                               [boolean]\n  -u, --user         Your facebook username/email            [string] [required]\n  -p, --pass         Your facebook password                  [string] [required]\n  -f, --cookiefile   Location of cookie file                 [string] [required]\n  -v, --video        Instagram Video FilePath                [string] [required]\n  -c, --caption      Instagram Caption Text                             [string]\n  -i, --image        Instagram Video Cover FilePath                     [string]\n  -l, --location     Instagram Location                                 [string]\n  -d, --date         Instagram Schedule Date DD/MM/YYYY                 [string]\n  -t, --time         Instagram Schedule Time HH:MM                      [string]\n  -x, --crosspost    Post to Facebook Page too                          [string]\n  -s, --screenshots  Screenshot every step\n  -n, --noop         NO OPeration. Used to test script works\n```\n\n\nInstall the commandline tool with: (while in the directory)\n```bash\nnpm install -g .\n```\n\nUninstall with:\n```bash\nnpm uninstall -g ig-scheduler\n```\n\nRun an installed veersion with `cs` (which is the name of the command)\n```bash\ncs -u me@gmail.com  to query these routes.\n\n#### `/` \n\nThis is the main route. It will execute the -p PASSWORD -f /Users/me/cookies.json -v ./output.mov -c \"Crosspost\" -d 05/11/2020 -t 02:00 -x yes\n```\n\nYou can track progress throught the debug log at `./logs/debug.log`\n\n## `cli_vd.js`\n\nThis is a simpler script that acts as a command-line interface to the `video_download.js` script.\n\nYou can see usage here:\n\n```bash\n❯ node ./cli_vd.js --help\nUsage: -u <url> -f <file>\n\nOptions:\n  --help      Show help                                                [boolean]\n  --version   Show version number                                      [boolean]\n  -u, --url   The video URL to download                      [string] [required]\n  -f, --file  Your target filename                           [string] [required]\n```\n\n\n\n\n\n## `video_download.js`\n\nThis has one public method, `download()` which takes two parameters, `url` and `filePath`. The `cli_vd.js` script should be used to run this method.\n\n\n## `server.js`\n\nSo this is an HTTP REST web interface that uses `express.js`. Since this is all meant to run within a docker container, the `HOST` is `0.0.0.0` and `PORT` is `8080`. It requires docker to connect to those ports to its external one.\n\n### Open Folders\n\nThere are four folders open that are used to allow you to access the contents. This uses the `serve-index` library to show the contents of the folder via a browser. visit the paths to see the contents.\n\n#### `/logs`\n\nThis contains the `debug.log` file.\n\n#### `/videos`\n\nThis contains the video files downloaded with the `video_download.js` script. Use this to check the video has downloaded.\n\n#### `/images`\n\nThis contains the coverart files downloaded with the `video_download.js` script. Use to make sure the image file has downloaded.\n\n#### `/screenshots`\n\nContains the last round of screenshots taken by the script if the `screenshot` parameter has been switched on.\n\n### Routes\n\nThe following routes are available. Use something like `postman.com` to query these routes.\n\n- POST to `/`\n- POST to `/vd`\n- POST to `/clearcookies`\n- GET to `/clearlog`\n- GET to `/status`\n\n#### `POST` to `/` \n\nA `POST` request to the root of the domain will execute the main puppeteer script. \n\nRequires the following PARAMETERS:\n\n- `apikey=APIKEYSETINAUTHJSONFILE123` \n\nRequires the following HEADERS:\n\n- `CONTENT-TYPE = application/json`\n\nRequires the following RAW JSON BODY:\n\n```json\n{\n    \"user\":      \"me@gmail.com\", \n    \"pass\":      \"mypassword\",\n    \"cookies\":   \"cookies.json\",\n    \"video\":     \"output.mp4\",\n    \"cover\":     \"cover.jpg\",\n    \"date\":      \"09/11/2022\",\n    \"time\":      \"12:30\",\n    \"location\":  \"New York\",\n    \"caption\":   \"Testing from postman\",\n    \"crosspost\": \"on\",\n    \"screenshots\": \"on\",\n    \"noop\":       false\n}\n```\n\n\n#### `POST` to `/vd`\n\nThis will instigate the video_download.js script.\n\nRequires the following PARAMETERS:\n\n- `apikey=APIKEYSETINAUTHJSONFILE123` \n\nRequires the following HEADERS:\n\n- `CONTENT-TYPE = application/json`\n\nRequires the following RAW JSON BODY:\n\n```json\n{\n    \"url\": \"https://domain.com/wp-content/uploads/2020/10/video.mp4\", \n    \"file\": \"./videos/output.mp4\"\n}\n```\n\n\n#### `POST` to `/clearcookies`\n\nThis will delete the cookie file so the puppeteer script will need to log in again.\n\nRequires the following PARAMETERS:\n\n- `apikey=APIKEYSETINAUTHJSONFILE123` \n\nRequires the following HEADERS:\n\n- `CONTENT-TYPE = application/json`\n\nRequires the following RAW JSON BODY:\n\n```json\n{\n    \"cookies\":   \"cookies.json\"\n}\n```\n\n#### GET to `/clearlog`\n\nThis will truncate the `debug.log` file.\n\nRequires the following PARAMETERS:\n\n- `apikey=APIKEYSETINAUTHJSONFILE123` \n\n\n#### GET to `/status`\n\nThis will get the last known status of the script. It will be one of the following states:\n\n- success\n- running\n- error\n\nUse this for alerting or metrics.\n\nRequires the following PARAMETERS:\n\n- `apikey=APIKEYSETINAUTHJSONFILE123` \n\n\n## Docker\n\nThis script is also dockerised and contains the dockerfile I use to setup my installation on DigitalOcean.",
  "readme_html": "https://github.com/IORoot/puppeteer__creator-studio--instagram/blob/master/README.md",
  "last_cached": "2025-07-29T16:32:52.132Z"
}