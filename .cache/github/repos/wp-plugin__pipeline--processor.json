{
  "id": 287967407,
  "node_id": "MDEwOlJlcG9zaXRvcnkyODc5Njc0MDc=",
  "name": "wp-plugin__pipeline--processor",
  "full_name": "IORoot/wp-plugin__pipeline--processor",
  "private": false,
  "owner": {
    "login": "IORoot",
    "id": 8770616,
    "node_id": "MDQ6VXNlcjg3NzA2MTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8770616?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/IORoot",
    "html_url": "https://github.com/IORoot",
    "followers_url": "https://api.github.com/users/IORoot/followers",
    "following_url": "https://api.github.com/users/IORoot/following{/other_user}",
    "gists_url": "https://api.github.com/users/IORoot/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/IORoot/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/IORoot/subscriptions",
    "organizations_url": "https://api.github.com/users/IORoot/orgs",
    "repos_url": "https://api.github.com/users/IORoot/repos",
    "events_url": "https://api.github.com/users/IORoot/events{/privacy}",
    "received_events_url": "https://api.github.com/users/IORoot/received_events",
    "type": "User",
    "user_view_type": "public",
    "site_admin": false
  },
  "html_url": "https://github.com/IORoot/wp-plugin__pipeline--processor",
  "description": "Pipeline Processor to combine records. Part of the Pipeline Project",
  "fork": false,
  "url": "https://api.github.com/repos/IORoot/wp-plugin__pipeline--processor",
  "forks_url": "https://api.github.com/repos/IORoot/wp-plugin__pipeline--processor/forks",
  "keys_url": "https://api.github.com/repos/IORoot/wp-plugin__pipeline--processor/keys{/key_id}",
  "collaborators_url": "https://api.github.com/repos/IORoot/wp-plugin__pipeline--processor/collaborators{/collaborator}",
  "teams_url": "https://api.github.com/repos/IORoot/wp-plugin__pipeline--processor/teams",
  "hooks_url": "https://api.github.com/repos/IORoot/wp-plugin__pipeline--processor/hooks",
  "issue_events_url": "https://api.github.com/repos/IORoot/wp-plugin__pipeline--processor/issues/events{/number}",
  "events_url": "https://api.github.com/repos/IORoot/wp-plugin__pipeline--processor/events",
  "assignees_url": "https://api.github.com/repos/IORoot/wp-plugin__pipeline--processor/assignees{/user}",
  "branches_url": "https://api.github.com/repos/IORoot/wp-plugin__pipeline--processor/branches{/branch}",
  "tags_url": "https://api.github.com/repos/IORoot/wp-plugin__pipeline--processor/tags",
  "blobs_url": "https://api.github.com/repos/IORoot/wp-plugin__pipeline--processor/git/blobs{/sha}",
  "git_tags_url": "https://api.github.com/repos/IORoot/wp-plugin__pipeline--processor/git/tags{/sha}",
  "git_refs_url": "https://api.github.com/repos/IORoot/wp-plugin__pipeline--processor/git/refs{/sha}",
  "trees_url": "https://api.github.com/repos/IORoot/wp-plugin__pipeline--processor/git/trees{/sha}",
  "statuses_url": "https://api.github.com/repos/IORoot/wp-plugin__pipeline--processor/statuses/{sha}",
  "languages_url": "https://api.github.com/repos/IORoot/wp-plugin__pipeline--processor/languages",
  "stargazers_url": "https://api.github.com/repos/IORoot/wp-plugin__pipeline--processor/stargazers",
  "contributors_url": "https://api.github.com/repos/IORoot/wp-plugin__pipeline--processor/contributors",
  "subscribers_url": "https://api.github.com/repos/IORoot/wp-plugin__pipeline--processor/subscribers",
  "subscription_url": "https://api.github.com/repos/IORoot/wp-plugin__pipeline--processor/subscription",
  "commits_url": "https://api.github.com/repos/IORoot/wp-plugin__pipeline--processor/commits{/sha}",
  "git_commits_url": "https://api.github.com/repos/IORoot/wp-plugin__pipeline--processor/git/commits{/sha}",
  "comments_url": "https://api.github.com/repos/IORoot/wp-plugin__pipeline--processor/comments{/number}",
  "issue_comment_url": "https://api.github.com/repos/IORoot/wp-plugin__pipeline--processor/issues/comments{/number}",
  "contents_url": "https://api.github.com/repos/IORoot/wp-plugin__pipeline--processor/contents/{+path}",
  "compare_url": "https://api.github.com/repos/IORoot/wp-plugin__pipeline--processor/compare/{base}...{head}",
  "merges_url": "https://api.github.com/repos/IORoot/wp-plugin__pipeline--processor/merges",
  "archive_url": "https://api.github.com/repos/IORoot/wp-plugin__pipeline--processor/{archive_format}{/ref}",
  "downloads_url": "https://api.github.com/repos/IORoot/wp-plugin__pipeline--processor/downloads",
  "issues_url": "https://api.github.com/repos/IORoot/wp-plugin__pipeline--processor/issues{/number}",
  "pulls_url": "https://api.github.com/repos/IORoot/wp-plugin__pipeline--processor/pulls{/number}",
  "milestones_url": "https://api.github.com/repos/IORoot/wp-plugin__pipeline--processor/milestones{/number}",
  "notifications_url": "https://api.github.com/repos/IORoot/wp-plugin__pipeline--processor/notifications{?since,all,participating}",
  "labels_url": "https://api.github.com/repos/IORoot/wp-plugin__pipeline--processor/labels{/name}",
  "releases_url": "https://api.github.com/repos/IORoot/wp-plugin__pipeline--processor/releases{/id}",
  "deployments_url": "https://api.github.com/repos/IORoot/wp-plugin__pipeline--processor/deployments",
  "created_at": "2020-08-16T15:09:13Z",
  "updated_at": "2025-07-22T09:49:51Z",
  "pushed_at": "2022-07-11T17:17:25Z",
  "git_url": "git://github.com/IORoot/wp-plugin__pipeline--processor.git",
  "ssh_url": "git@github.com:IORoot/wp-plugin__pipeline--processor.git",
  "clone_url": "https://github.com/IORoot/wp-plugin__pipeline--processor.git",
  "svn_url": "https://github.com/IORoot/wp-plugin__pipeline--processor",
  "homepage": "",
  "size": 2608,
  "stargazers_count": 0,
  "watchers_count": 0,
  "language": "PHP",
  "has_issues": true,
  "has_projects": true,
  "has_downloads": true,
  "has_wiki": true,
  "has_pages": false,
  "has_discussions": false,
  "forks_count": 0,
  "mirror_url": null,
  "archived": false,
  "disabled": false,
  "open_issues_count": 0,
  "license": null,
  "allow_forking": true,
  "is_template": false,
  "web_commit_signoff_required": false,
  "topics": [
    "acf",
    "automation",
    "wordpress-plugin"
  ],
  "visibility": "public",
  "forks": 0,
  "open_issues": 0,
  "watchers": 0,
  "default_branch": "master",
  "permissions": {
    "admin": true,
    "maintain": true,
    "push": true,
    "triage": true,
    "pull": true
  },
  "readme_content": "\n<div id=\"top\"></div>\n\n<div align=\"center\">\n\n<img src=\"https://svg-rewriter.sachinraja.workers.dev/?url=https%3A%2F%2Fcdn.jsdelivr.net%2Fnpm%2F%40mdi%2Fsvg%406.7.96%2Fsvg%2Fset-merge.svg&fill=%23A855F7&width=200px&height=200px\" style=\"width:200px;\"/>\n\n<h3 align=\"center\">Pipeline Processor</h3>\n\n<p align=\"center\">\nThe Processor allows you to combine records. Part of the Pipeline Project\n</p>\n</div>\n\n\n##  1. <a name='TableofContents'></a>Table of Contents\n\n\n## The Pipeline Project\n\nThe pipeline project was one where I wanted to be able to do the following:\n\n1. Query YouTube / Instagram for specific videos and download the results (video file, post content, meta, etc).\n1. Automatically create some cover art.\n1. Combine the videos to create a quick trailer.\n1. Export the results to my social media.\n\nThis then became the components of the pipeline project:\n\n1. [API Scraper](https://github.com/IORoot/wp-plugin__pipeline--api-scraper)\n1. [Generative Images](https://github.com/IORoot/wp-plugin__pipeline--generative-images)\n1. [The Processor](https://github.com/IORoot/wp-plugin__pipeline--processor)\n1. [Exporter](https://github.com/IORoot/wp-plugin__pipeline--exporter)\n\n\n##  2. <a name='AboutTheProject'></a>About The Project\n\nThis project focuses upon \"The Processor\". It's a rule based system that takes multiple posts and will combine them in a multitude of ways.\n\nThee idea is that you can query for a number of posts and then combine them by specifying exactly what you're going to do with each field.\n\nYou can mutate and alter the fields as you combine them.\n\nYou can manipulate multiple images at once if you have the pipeline generative-images plugin installed.\n\nAny video files can also be combined through the use of FFMpeg. Download and install FFMpeg as a dependency.\n\n<p align=\"right\">(<a href=\"#top\">back to top</a>)</p>\n\n\n###  2.1. <a name='BuiltWith'></a>Built With\n\nThis project was built with the following frameworks, technologies and software.\n\n* [wordpress_youtube_downloader](https://github.com/IORoot/wp-plugin__ytdl)\n* [FFMpeg](https://ffmpeg.org/)\n* [ACF Pro](https://advancedcustomfields.com/)\n* [Composer](https://getcomposer.org/)\n* [PHP](https://php.net/)\n* [Wordpress](https://wordpress.org/)\n\n<p align=\"right\">(<a href=\"#top\">back to top</a>)</p>\n\n\n\n\n###  3.2. <a name='Installation'></a>Installation\n\n> This was built with ACF PRO - Please make sure it is installed before installing this plugin.\n\nThese are the steps to get up and running with this plugin.\n\n1. Clone the repo into your wordpress plugin folder\n    ```bash\n    git clone https://github.com/IORoot/wp-plugin__pipeline--processor ./wp-content/plugins/pipeline-processor\n    ```\n1. Activate the plugin.\n\n\n<p align=\"right\">(<a href=\"#top\">back to top</a>)</p>\n\n\n\n##  4. <a name='Usage'></a>Usage\n\nThere are eight tabs in the the processor:\n \n### Job.\n\nThe job allows you to pick which parts of the processor you want combine and run together.\n\n- Enabled. Run this particular job on save. On or off.\n- Job ID. Identifier to distinguish between each job.\n- Content. Reference to any Content ID's that are enabled.\n- Process. Reference to any Process ID's that are enabled.\n- Combine. Reference to any Combine ID's that are enabled.\n- Mappings. Reference to any Mappings ID's that are enabled.\n- Save. Reference to any Save ID's that are enabled.\n- Housekeep. Reference to any Housekeep ID's that are enabled.\n- Schedule. Reference to any Schedule ID's that are enabled.\n\n![job](https://github.com/IORoot/wp-plugin__pipeline--processor/blob/master/files/docs/job.png?raw=true)\n\nExample:\n\n![example_6_job](https://github.com/IORoot/wp-plugin__pipeline--processor/blob/master/files/help_images/example_6_job.png?raw=true)\n\n\n\n\n\n### Content.\n\nPick which posts you wish to combine.\n\n- Enabled. Allow this particular ID to be selectable in the Job tab.\n- Content ID. Identifier for the Job tab.\n- Content Input. Select how you wish to pick the posts to combine. Via a query or manually picked.\n- Query. Use a `WP_Query` array to specify which posts you wish to return.\n- Posts. Multi-select of all post types. \n\n![content-query](https://github.com/IORoot/wp-plugin__pipeline--processor/blob/master/files/docs/content-query.png?raw=true)\n![content-posts](https://github.com/IORoot/wp-plugin__pipeline--processor/blob/master/files/docs/content-posts.png?raw=true)\n\nExample:\n\n![example_1_content](https://github.com/IORoot/wp-plugin__pipeline--processor/blob/master/files/help_images/example_1_content.png?raw=true)\n\n\n\n\n### Process.\n\n- Enabled. Allow this particular ID to be selectable in the Job tab.\n- Process ID. Identifier for the Job tab.\n- Fields. Specify how to handle each post field (Row) \n    - Input Field. The post field that you wish to combine.\n    - Process Method. You can loop through each result or process entire colleection at once.\n    - Mutations. These are things you can do to the fields.\n\n\n##### Input Field *\nThe field in the record you want to use as the source. The select box will “flatten” the post so that any arrays will have -> arrow functions to signify each element of the array.\n\nAn example would be the array _Attachment_Metadata['width'] would become “_Attachment_Metadata->width” as an option.\n\n##### Process Method\nThe process will normally loop through the entire collection, then each record, and then each field. However, sometimes, you only want to perform a task once on the entire collection and copy the results onto each record.\n\n1. Example 1 - Loop through each record.\n`post_title`. Lets say you retrieve two results from the database. The collection is two `WP_Posts`. The processor will look at the first post first, then the `post_title` of that record and perform the mutation on it… Let's say uppercase it. Then it will loop onto the next record and repeat the process.\n\n1. Example 2 - Process entire collection at once\n`ID`. The second example also retrieves two records. The collection is two `WP_Posts` also. Lets say you want use the 'Generator_Image' mutation to create some coverart that creates a grid of both `WP_Post` thumbnails. Well, you need to send both images into this mutation, so you can't loop each post individually, so instead, this mode will collect ALL the ID's in the collection and pass them all to the mutation. Each specific mutation will identify if it requires this mode or not.\n\n#### Mutations\n\n##### Do Nothing. \n\nOutput value is same as input value.\n\n##### Generator Image\n\nConnect to the [generative-images](https://github.com/IORoot/wp-plugin__pipeline--generative-images) plugin if installed. \n\n- Enabled. Run or not.\n- Filter slug. The filter to run in the generator.\n- Source Images. Send all results of the query or just each one individually.\n- Save as. Output file type. JPB, PNG, SVG.\n- Image width. Output width of image.\n- Image height. Output height of image.\n\nThe image generator plugin allows you to select some input posts and it uses their thumbnail images to create new artwork and imagery. This is done by using SVGs and building up layers to apply.\n\nThis mutation runs that Image Generator Plugin by sending the following settings:\n\nFilter Slug : The name of the filter group in the generator image plugin you wish to run.\nSource Images : An array of WP_Posts or a casted array of a single WP_Post need to be sent to the Image generator. It will look for the posts ID field to convert to a real WP_Post object if the WP_Post/WP_Term is not found. The Source Images field allows you to send each post individually, or as an entire collection. The one you need will depend on the Filter you want to run.\nSave As : The formats you wish to save as the output result image as.\nHeight / Width : By default, the size of the input image dimensions are used to dictate the output size. You can specify a custom width and height here. This is optional.\n\n\n##### Single Image\n\nAllows you to rewrite the contents of a field with the URL of a specified image. Helpful if you want to pass through a consistent image like a watermark.\n\n- Enabled. On or off.\n- Image. Select the image to use.\n\n\n##### Filter (wordpress filter)\n\n- Enabled. On or off.\n- Filter Name. The name of the wordpress filter you wish to send the field data to.\n- Filter Arguments. Arguments array to pass to `apply_filters_ref_array()`\n\nThe Filter mutation allows you to send the input posts to any Wordpress filter of your choosing. Gives you the ability to write your own Wordpress filters to hook into.\n\nThis mutation runs the `apply_filters_ref_array()` function with the specified filter name and arguments you provide.\n\nThere are four `{{moustache}}` variables you can use.\n\n'{{field_key}}` : This will replace the moustache with the current input field key.\n'{{field_value}}` : This will replace the moustache with the input fields real value.\n'{{record}}` : The moustache will be the entire current record, if that needs to be passed into the filter.\n'{{collection}}` : This is an array of the entire result collection from the input query.\n\n\n##### Uppercase \n\nSimple mutation to change all text into uppercase.\n\n- Enabled. On or off.\n\n\n##### Youtube Downloader FFMpeg\n\n- Enabled. On or Off.\n- YouTube Video Code. The code for thee video you wish to download. You can usee {{moustache}} brackets.\n- Override existing files. Existing videos will be re-downloaded if already found.\n- Video Seek Start Point. Partial downloads - The [hh:mm:ss] time of where to start downloading.\n- Video Seek Duration. Partical downloads - The [hh:mm:ss] time of how much to download.\n\n###### YouTube Downloader Plugin.\n\nThis downloader allows you to capture partial video from youtube. This speeds up processing time because you don't need to wait for the entire video unless needed.\n\n###### Prerequisites\n\n- The [wordpress_youtube_downloader](https://github.com/IORoot/wp-plugin__ytdl) plugin installed.\n- FFMpeg installed on the system.\n\n###### Input Video Code\nThe input video code can be a few different formats.\n\n###### The code. \nThe actual youtube video code you wish to use. Eg. dQw4w9WgXcQ The Code is at the end of the video URL, after the v= part. For example https://www.youtube.com/watch?v=dQw4w9WgXcQ\n`{{field_key}}`. Using this moustache-bracket string will use the input field you have selected above (Like, say Video->0) and will replace it with that KEY. (In this case, Video->0)\n`{{field_value}}`. Using this moustache-bracket string will use the input field you have selected above (Like, say Video->0) and will replace it with the VALUE of that field. (In this case, the actual video code. dQw4w9WgXcQ)\n\n######  Timings\nStart Time : An hh:mm:ss notation of where in a video you want to start downloading.\nDuration : An hh:mm:ss notation of how much, from the start time, you want to download.\n\n###### Output Folder\nAll downloaded videos are placed into the Wordpress /uploads directory in the current year and month.\n\nThis mutation is “collection” processing enabled. Meaning that you only have to run it once on the entire collection, rather than multiple times for each record. Switch the field “Processing Method” to “Process entire collection once.” to enable this feature.\n\n###### Output Filename\nAll video files that are downloaded have the filename of the video code followed by a suffix. So the filename will look like this: dQw4w9WgXcQ_video.mp4\n\nThe suffix for all files will be _video.\n\n##### FFMpeg Multi Processor\n\nUse FFMpeg to process the video with the arguments you supply. The power of FFMpeg allows you to do most things with video - cutting, editing, colour-grading, use of LUTS, etc...\n\n- Enabled. On or off.\n- Description. Short summary of what this does.\n- FFMpeg arguments. These are just the arguments to FFMPeg, They will be prefixed with '/usr/local/ffmpeg'.\n\n###### FFMpeg Multi Processor\nThis mutation allows you to use FFMpeg to process any video files as a group or individually.\n\n###### Prerequisites\n\n- Downloaded video files.\n- FFMpeg installed on the system.\n\n###### Details\nThis mutation is “collection” processing enabled. Meaning that you only have to run it once on the entire collection, rather than multiple times for each record. Switch the field “Processing Method” to “Process entire collection once.” to enable this feature.\n\nThis will take all records `{{collection}}` and run multiple FFMpeg steps on those records. Each input record can be referenced in the script with `$0, $1, $2,` etc…\n\n###### Arguments\nThe Arguments : These are just the arguments to the FFMPeg program, They will be prefixed with `/usr/local/ffmpeg`\n\n###### Variables\nThere are the following variables available to use within the arguments.\n\n`$inputs` : This will represent a string of inputs on the command line with a -i prefix to each one. `-i input1.mp4 -i input2.mp4 -i input3.mp4`\n`$upload_dir` : This is the location of the current upload directory. Use for output file location. e.g. `$upload_dir/output.mp4`\n`$date` : This will insert the current DateTime in the format `Ymd_Hms`. This is useful for naming output files. Note. Using a DateTime on the output filename will always generate a new file and never overwrite an existing one. The DateTime will make a unique filename every time. For example: `$upload_dir/output_$date.mp4`\n`$timestamp`     : This will insert the current DateTime in the format `U`. Which is the Unix timestamp. Again, this is useful for naming files. Note. Using a timestamp on the output filename will always generate a new file and never overwrite an existing one. The timestamp will make a unique filename every time. For example: `$upload_dir/output_$timestamp.mp4`\n\n###### Example\nThis following example will concatenate the video and audio of four videos together.\n\n```bash\n-n $inputs -filter_complex \"[0:v] [0:a] [1:v] [1:a] [2:v] [2:a] [3:v] [3:a] concat=n=4:v=1:a=1 [v] [a]\" -map \"[v]\" -map \"[a]\" -strict -2 $upload_dir/output.mp4\n```\n\n###### Combo : Download and Process\n\n1. Step 1. Use the  Youtube Downloader FFMpeg mutation to download each youtube video using a field that contains a youtube video code. e.g. `VideoId->0`\n\nThis will download the videos into the current Wordpress uploads directory in the format dQw4w9WgXcQ_video.mp4\n\n1. Step 2. Use this FFMpeg Multi Processor plugin to pick up those downloaded files and process them.\n\nUse the `$inputs` variable to specify you want to use those downloaded videos in the processing.\n\n![process](https://github.com/IORoot/wp-plugin__pipeline--processor/blob/master/files/docs/process.png?raw=true)\n\nExample:\n\n![example_2_process](https://github.com/IORoot/wp-plugin__pipeline--processor/blob/master/files/help_images/example_2_process.png?raw=true)\n\n\n\n\n### Combine.\n\nThe combine tool will help you decide how to process each record into one single record.\n\nYou can pick each field key you wish to keep in the output record and the method to generate it.\n\n#### Input Field\nThe field key in a record coming out of the  Process stage.\n\nNOTE - Only the fields that have been processed in the  Process stage will be available to the combine stage.\n\nUse the debug tool in the Process tab to see what fields are available.\n\n#### Combine Method\nHow to combine the records into one. The fields are “flattened” from arrays into single fields so each record is prefixed with the record number and identifiable.\n\nThe following combine methods are available:\n\n#### Use First Record : This will keep the [key => value] array field of the first record only and ignore the rest. The resulting field will have the first records’ array field.\nFor example, if the collection array has three records in it, like this:\n```php\n    [\n        [ 'post_title' => 'Post One' ],\n        [ 'post_title' => 'Post Two' ],\n        [ 'post_title' => 'Post Three' ],\n    ]\n```\nThe result combined record would be:\n```php\n    [ \n            'post_title' => 'Post One' \n    ]\n```\n#### Use Last Record : This will keep the value of the last record in the collection and ignore the rest. The resulting field will have the last record’s value.\nFor example, if the collection array has three records in it, like this:\n```php\n    [\n        [ 'post_title' => 'Post One' ],\n        [ 'post_title' => 'Post Two' ],\n        [ 'post_title' => 'Post Three' ],\n    ]\n```\nThe result combined record would be:\n```php\n    [ \n        'post_title' => 'Post Three' \n    ]\n```\n#### Keep All Records : This will include the field from ALL records and prefix each field key with a record number.\nFor example, if the collection array has three records in it, like this:\n```php\n    [\n        [ 'post_title' => 'Post One' ],\n        [ 'post_title' => 'Post Two' ],\n        [ 'post_title' => 'Post Three' ],\n    ]\n```\n\nThe result combined record would be:\n```php\n    [ \n            '0_post_title' => 'Post One',\n            '1_post_title' => 'Post Two',\n            '2_post_title' => 'Post Three' \n    ]\n```\n\n![combine](https://github.com/IORoot/wp-plugin__pipeline--processor/blob/master/files/docs/combine.png?raw=true)\n\nExample:\n\n![example_3_combine](https://github.com/IORoot/wp-plugin__pipeline--processor/blob/master/files/help_images/example_3_combine.png?raw=true)\n\n\n\n\n### Mapping.\n\nThe mapping stage will allow you to populate the final output record with values. This is done using a template which can contain {{moustache}} fields that will be substituted with real values.\n\n#### Required Minimum\nTo generate a successful post within Wordpress, you will need these fields to be declared:\n\n- post_title\n- post_status to be set to published\n\n#### Mapping Template\nThe mapping template is the value you wish to put into the field. This can be a combination of raw text and `{{moustache}}` fields.\n\nExample input :\n\nTitle one will be `{{0_post_title}}` and Title two will be `{{1_post_title}}`\nThe output value, placed into the database will be something like this:\n\n```\nTitle one will be FIRST POST TITLE and Title two will be THE SECOND POST TITLE\n```\n\n#### Date Moustache\nThe following additional `{{date:PHP_DATE_FORMAT}} `moustache is also available.\n\n`{{date:PHP_DATE_FORMAT}}` : This allows you to insert the current DateTime into the field. See the PHP manual for formats to use.\n\nExamples:\n- `{{date:U}}` For a Unix Timestamp.\n- `{{date:c}}` For an ISO 8601 date.\n- `{{date:d m Y}}` For : day month year. dd mm yyyy.\n\n#### Type\nYou can pick one of three post types:\n\n- Post : This will allow you to insert values into the base WP_POST object. There are a strict number of fields for this object, so the “Post Field” values are restricted to those (see below).\n- Meta : The Meta field allows you to specify any string as the field key. Post meta is stored as an array, so VideoID will become `VideoID[0] => 'value'`\n- Image : The image type is an attachment post type and has the same fields as a WP_POST. There is a single required field to be set, and that is path. This needs to be the relative location to `/wp-content/uploads/`. E.g. `/2020/11/my_image.jpg`\n\n#### Post Field\nThis will be a select dropdown box of all the fields available for a WP_POST.\n\n#### Post Meta Field\nThis will be a text entry box to input the value of the meta key you want to create.\n\n#### Post Image Field\nThis will be a text entry box to input the value of the key you want to create on an 'attachment' post.\n\n\n![mapping](https://github.com/IORoot/wp-plugin__pipeline--processor/blob/master/files/docs/mapping.png?raw=true)\n\nExample:\n\n![example_4_mapping](https://github.com/IORoot/wp-plugin__pipeline--processor/blob/master/files/help_images/example_4_mapping.png?raw=true)\n\n\n\n\n### Save.\n\nThe saving stage lets you upload the final post into the WordPress system as a post.\n\n#### Exporter - Custom Post Type (CPT)\nBuilt into the Processor plugin is a custom post type called Exporter'. This can be found in the left admin sidebar. It has its own custom taxonomy called 'exportercategory'.\n\nThis allows you to keep the output separate from other post types if needed and comes with the added benefit of a “Featured Image” column in the list page that gives a preview of the attached image.\n\n#### Save PostType\nSelect ANY post type to insert your new post into. This is an auto-populated list of all post types within your Wordpress system. It also includes the 'Exporter' CPT.\n\n#### Save Taxonomy\nSelect ANY taxonomy to attach the post to. This is an auto-populated list of all taxonomies within your Wordpress system.\n\nNote that it's probably best practice to only use a taxonomy that is assigned to the particular post type you have selected. For instance, only use the 'exportercategory' taxonomy for the 'exporter' post type\n\n#### Save Taxonomy Term\nA text box for you to give a custom term to the post within the selected taxonomy.\n\nUseful for separating different content types.\n![save](https://github.com/IORoot/wp-plugin__pipeline--processor/blob/master/files/docs/save.png?raw=true)\n\nExample:\n\n![example_5_save](https://github.com/IORoot/wp-plugin__pipeline--processor/blob/master/files/help_images/example_5_save.png?raw=true)\n\n\n\n\n### Housekeep.\n\nThe housekeep stage helps you clean up any posts, images or taxonomy you wish to remove after processing.\n\n#### Example\nIf you are processing a particular type of post, say a youtube custom post type, to join together three posts into a single post in the exporter, you may want to delete the youtube posts afterwards.\n\nTo do this, you can use a simple query like this:\n```php\n[\n    'post_type' => 'youtube',\n    'numberposts' => 3,\n]\n```\n\nThe query can be as complex as you like, using all features of a WP_Query. See [https://developer.wordpress.org/reference/classes/wp_query/](https://developer.wordpress.org/reference/classes/wp_query/) for more details.\n\n![housekeep](https://github.com/IORoot/wp-plugin__pipeline--processor/blob/master/files/docs/housekeep.png?raw=true)\n\n\n\n### Schedule.\n\nThe scheduler allows you to repeat the processor job on a regular timer.\n\n- Enabled. on or off.\n- Schedule ID. Identifier for the job tab.\n- Schedule List. (Row)\n    - Schedule Label - ID for each schedule instance.\n    - Schedule Repeats - How often should the schedule repeat. A relative date.\n    - Schedule Starts - A Start on a particular DateTime.\n\n![schedule](https://github.com/IORoot/wp-plugin__pipeline--processor/blob/master/files/docs/schedule.png?raw=true)\n\n\n\n\n<p align=\"right\">(<a href=\"#top\">back to top</a>)</p>\n\n\n\n## Basic Setup Example.\n\nBasic Setup Example\nThis is an example of how to setup a simple end-to-end processor. The idea is to take three posts out of Wordpress and combine them together to generate a single new post in the Exporter custom post type.\n\nRequirements\nThree posts in the posts post type. Each must have a featured image attached.\n\n1.  Content\n    - Click > Add new row\n    - Enabled : Yes\n    - Content ID : “Example Content”\n    - Content Input : Query\n    - Query :\n    ```php\n        [\n            'post_type' => 'post',\n            'numberposts' => 3,\n        ]\n    ```\n\n2.  Process\n    - Click > Add new row\n    - Enabled : Yes\n    - Process ID : “Example Process”\n    - Click > Add Field\n    - Input Field : post_title\n    - Process Method : Loop through each record.\n    - Click > Add Mutation\n    - Select > Do Nothing\n    - Enabled : Yes\n    - Description : Raw Title\n    - Click > Add Field\n    - Input Field : _wp_attached_file->0\n    - Process Method : Loop through each record.\n    - Click > Add Mutation\n    - Select > Do Nothing\n    - Enabled : Yes\n    - Description : Raw Image\n\n\n3.  Combine\n    - Click > Add Row\n    - Enabled : Yes\n    - Combine ID : “Example Combine”\n    - Combine Records : Combine into one collection\n    - Click > Add Input Field Row\n    - Input Field : post_title\n    - Combine Method : Keep all records\n    - Click > Add Input Field Row\n    - Input Field : _wp_attached_file->0\n    - Combine Method : Use First Record\n\n\n4.  Mapping\n    - Click > Add Row\n    - Enabled : Yes\n    - Mapping ID : “Example Mapping”\n    - Click > Add Mapping\n    - Mapping Template : {{0_post_title}} and {{1_post_title}} and {{2_post_title}}\n    - Type : Post\n    - Post Field : post_title\n    - Click > Add Mapping\n    - Mapping Template : publish\n    - Type : Post\n    - Post Field : post_status\n    - Click > Add Mapping\n    - Mapping Template : {{0__wp_attached_file->0}}\n    - Type : Image\n    - Post Field : path\n\n\n5.  Save\n    - Click > Add Row\n    - Enabled : Yes\n    - Mapping ID : “Example Save”\n    - Save PostType : exporter\n    - Save Taxonomy : exportercategory\n    - Save Taxonomy Term: example_save_term\n\n\n6.  Job\n    - Content : Example Content\n    - Process : Example Process\n    - Combine : Example Combine\n    - Mapping : Example Mapping\n    - Save : Example Save\n    - Housekeep : none\n    - Schedule : none\n    - Run\n\nOnce happy with all of the settings, you can click the update button to run the process.\n\n\n##  5. <a name='Contributing'></a>Contributing\n\nContributions are what make the open source community such an amazing place to learn, inspire, and create. Any contributions you make are **greatly appreciated**.\n\nIf you have a suggestion that would make this better, please fork the repo and create a pull request. You can also simply open an issue.\nDon't forget to give the project a star! Thanks again!\n\n1. Fork the Project\n2. Create your Feature Branch (`git checkout -b feature/AmazingFeature`)\n3. Commit your Changes (`git commit -m 'Add some AmazingFeature'`)\n4. Push to the Branch (`git push origin feature/AmazingFeature`)\n5. Open a Pull Request\n\n<p align=\"right\">(<a href=\"#top\">back to top</a>)</p>\n\n\n\n##  6. <a name='License'></a>License\n\nDistributed under the MIT License.\n\nMIT License\n\nCopyright (c) 2022 Andy Pearson\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n<p align=\"right\">(<a href=\"#top\">back to top</a>)</p>\n\n\n\n##  7. <a name='Contact'></a>Contact\n\nProject Link: [https://github.com/IORoot/...](https://github.com/IORoot/...)\n\n<p align=\"right\">(<a href=\"#top\">back to top</a>)</p>\n\n\n\n##  8. <a name='Changelog'></a>Changelog\n\nv1.0.0 - First version.\n",
  "readme_html": "https://github.com/IORoot/wp-plugin__pipeline--processor/blob/master/README.md",
  "last_cached": "2025-07-29T16:32:52.132Z"
}